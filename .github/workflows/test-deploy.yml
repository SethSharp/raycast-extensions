name: Test Deploy

on: [ push ]

jobs:
  test:
    runs-on: ubuntu-20.04

    env:
      DB_DATABASE: testing
      DB_USER: root
      DB_PASSWORD: root

    steps:
      - uses: actions/checkout@v2

      - name: Set up MySQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -e 'CREATE DATABASE ${{ env.DB_DATABASE }};' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: zip, sqlite3
          coverage: none

      - name: Restore caches
        uses: actions/cache@v2
        with:
          path: ~/.composer/cache/files
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install composer dependencies
        run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Code sniff
        run: vendor/bin/php-cs-fixer fix --dry-run

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Generate key
        run: php artisan key:generate

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Build frontend
        run: |
          npm ci
          npm run build
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Execute tests
        env:
          DB_USERNAME: root
          DB_PASSWORD: root
        run: php artisan test --parallel

      - name: Deploy to vapor
        if: github.ref == 'refs/heads/develop'
        run: vendor/bin/vapor deploy staging --commit="${GITHUB_SHA}" --message="GitHub run ${GITHUB_WORKFLOW} ${GITHUB_RUN_NUMBER} by ${GITHUB_ACTOR}"
        env:
          FLARE_PUBLIC_KEY: NcPR0MY3AvNrJ3QJNHqITSJnLweFYofO
          VAPOR_API_TOKEN: ${{ secrets.VAPOR_API_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Notify Slack on deploy
        if: github.ref == 'refs/heads/develop'
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployed to staging"}' https://hooks.slack.com/services/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

      - name: Notify Slack of failure
        if: github.ref == 'refs/heads/develop' && failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Tests failed for action at https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"}' https://hooks.slack.com/services/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

      - name: Deploy to vapor
        if: github.ref == 'refs/heads/main'
        run: vendor/bin/vapor deploy production --commit="${GITHUB_SHA}" --message="GitHub run ${GITHUB_WORKFLOW} ${GITHUB_RUN_NUMBER} by ${GITHUB_ACTOR}"
        env:
          FLARE_PUBLIC_KEY: ZyVmF7r8U0IvBXwu4Xr7WrHmH09M4DRv
          VAPOR_API_TOKEN: ${{ secrets.VAPOR_API_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Notify Slack on deploy
        if: github.ref == 'refs/heads/main'
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployed to production"}' https://hooks.slack.com/services/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

      - name: Notify Slack of failure
        if: github.ref == 'refs/heads/main' && failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Tests failed for action at https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"}' https://hooks.slack.com/services/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

